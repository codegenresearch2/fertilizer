import json\\\\nimport os\\\\\n\\nfrom .errors import ConfigKeyError\\\\\n\\\\nclass Config:\\\"\\\"Class for loading and accessing the config file.\\\"\\\",\\\\n    def __init__(self):\\\"\\\"Initialize the Config object.\\\"\\\",\\\\n        self._json = {}\\\\\n\\\\n    def load(self, config_filepath: str):\\\"\\\"Load the configuration from a JSON file.\\\"\\\",\\\\n        if not os.path.exists(config_filepath):\\\\\n            raise FileNotFoundError(f'{config_filepath} does not exist.')\\\\\n\\\\n        with open(config_filepath, 'r', encoding='utf-8') as f:\\\\\n            self._json = json.loads(f.read())\\\\\n\\\\n        return self\\\\n\\\\n    @property\\\\n    def red_key(self) -> str:\\\"\\\"Get the red_key from the config.\\\"\\\",\\\\n        return self.__get_key('red_key')\\\\n\\\\n    @property\\\\n    def ops_key(self) -> str:\\\"\\\"Get the ops_key from the config.\\\"\\\",\\\\n        return self.__get_key('ops_key')\\\\n\\\\n    @property\\\\n    def server_port(self) -> str:\\\"\\\"Get the server_port from the config.\\\"\\\",\\\\n        return self.__get_key('server_port', '9713')\\\\n\\\\n    def __get_key(self, key, default=None):\\\"\\\"Get a key from the config, with optional default.\\\"\\\",\\\\n        try:\\\\\n            return self._json[key]\\\\\n        except KeyError:\\\\\n            if default is not None:\\\\\n                return default\\\\\n            else:\\\\\n                raise ConfigKeyError(f'Key \'{key}\' not found in config file.')\\\\\n