import json\\\n\\nclass Config:\\\"""\\\nClass for loading and accessing the config file.\\\"""\\\\\n\\\\n    def __init__(self):\\\"""\\\n        Initializes the Config object.\\\"""\\\\\n        self._json = {}\\\"\\\\n\\\\n    def load(self, config_filepath: str):\\\"""\\\n        Loads the config from the given file path.\\\"""\\\\\n        if not os.path.exists(config_filepath):\\\\\n            raise FileNotFoundError(f'{config_filepath} does not exist.')\\\\\n\\\\n        with open(config_filepath, 'r', encoding='utf-8') as f:\\\\\n            self._json = json.loads(f.read())\\\\\n\\\\n        return self\\\"\\\\n\\\\n    @property\\\\n    def server_port(self) -> str:\\\"""\\\n        Returns the server port from the config file.\\\"""\\\\\n        return self._json.get('server_port', '9713')\\\"\\\\n\\\\n    @property\\\\n    def red_key(self) -> str:\\\"""\\\n        Returns the red_key from the config file.\\\"""\\\\\n        return self.__get_key('red_key')\\\"\\\\n\\\\n    @property\\\\n    def ops_key(self) -> str:\\\"""\\\n        Returns the ops_key from the config file.\\\"""\\\\\n        return self.__get_key('ops_key')\\\"\\\\n\\\\n    def __get_key(self, key) -> str:\\\"""\\\n        Helper method to get a key from the config file.\\\"""\\\\\n        if key not in self._json:\\\\\n            raise ConfigKeyError(f'Key \'{key}\' not found in config file.')\\\\\n        return self._json[key]\\\"\\\\n