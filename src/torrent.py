import os\\\nimport copy\\nfrom html import unescape\\n\\nfrom .api import RedAPI, OpsAPI\\nfrom .trackers import RedTracker, OpsTracker\\nfrom .errors import TorrentDecodingError, UnknownTrackerError, TorrentNotFoundError, TorrentAlreadyExistsError\\nfrom .filesystem import replace_extension\\nfrom .parser import (\\n  get_bencoded_data, get_origin_tracker, recalculate_hash_for_new_source, save_bencoded_data\\n)\\\\\\\n\\nclass CustomTrackerError(Exception):\\n    pass\\n\\nclass MissingTrackerError(CustomTrackerError):\\n    def __init__(self, message="Torrent not from OPS or RED"):\\n        self.message = message\\n        super().__init__(self.message)\\\\\\\\\\\\\\\\\n\\nclass MissingTrackerAPIError(CustomTrackerError):\\n    def __init__(self, message="Tracker API not available"):\\n        self.message = message\\n        super().__init__(self.message)\\\\\\\\\\\\\\\\\n\\nclass NoReciprocalTrackerError(CustomTrackerError):\\n    def __init__(self, message="No reciprocal tracker available"):\\n        self.message = message\\n        super().__init__(self.message)\\\\\\\\\\\\\\\\\n\\nclass NoSourceFlagError(CustomTrackerError):\\n    def __init__(self, message="No source flag available"):\\n        self.message = message\\n        super().__init__(self.message)\\\\\\\\\\\\\\\\\n\\nclass NewTrackerNotFoundError(CustomTrackerError):\\n    def __init__(self, message="New tracker not found"):\\n        self.message = message\\n        super().__init__(self.message)\\\\\\\\\\\\\\\\\n\\nclass RecalculateHashError(CustomTrackerError):\\n    def __init__(self, message="Error recalculating hash"):\\n        self.message = message\\n        super().__init__(self.message)\\\\\\\\\\\\\\\\\n\\nclass GenerateTorrentError(CustomTrackerError):\\n    def __init__(self, message="Error generating new torrent"):\\n        self.message = message\\n        super().__init__(self.message)\\\\\\\\\\\\\\\\\n\\ndef generate_new_torrent_from_file(\\n  source_torrent_path: str,\\n  output_directory: str,\\n  red_api: RedAPI,\\n  ops_api: OpsAPI,\\n  input_infohashes: dict = {},\\n  output_infohashes: dict = {},\\n) -> tuple[OpsTracker | RedTracker, str]:\\n  source_torrent_data, source_tracker = __get_bencoded_data_and_tracker(source_torrent_path)\\n  new_tracker = source_tracker.reciprocal_tracker() or raise NoReciprocalTrackerError()\\n  new_tracker_api = __get_reciprocal_tracker_api(new_tracker, red_api, ops_api) or raise MissingTrackerAPIError()\\n\\n  try:\\n    for new_source in new_tracker.source_flags_for_creation():\\n      new_hash = recalculate_hash_for_new_source(source_torrent_data, new_source) or raise RecalculateHashError()\\n\\n      if new_hash in input_infohashes:\\n        raise TorrentAlreadyExistsError(f"Torrent already exists in input directory as {input_infohashes[new_hash]}")\\n      if new_hash in output_infohashes:\\n        raise TorrentAlreadyExistsError(f"Torrent already exists in output directory as {output_infohashes[new_hash]}")\\n\\n      api_response = new_tracker_api.find_torrent(new_hash) or raise NewTrackerNotFoundError()\\n\\n      if api_response["status"] == "success":\\n        new_torrent_filepath = generate_torrent_output_filepath(\\n          api_response,\\n          new_source.decode("utf-8"),\\n          output_directory,\\n        ) or raise GenerateTorrentError()\\n\\n        torrent_id = __get_torrent_id(api_response) or raise TorrentNotFoundError()\\n\\n        new_torrent_data = copy.deepcopy(source_torrent_data)\\n        new_torrent_data[b"info"][b"source"] = new_source.encode()\\n        new_torrent_data[b"announce"] = new_tracker_api.announce_url.encode()\\n        new_torrent_data[b"comment"] = __generate_torrent_url(new_tracker_api.site_url, torrent_id).encode()\\n\\n        return (new_tracker, save_bencoded_data(new_torrent_filepath, new_torrent_data))\\n      elif api_response["error"] in ("bad hash parameter", "bad parameters"):\\n        raise TorrentNotFoundError(f"Torrent could not be found on {new_tracker.site_shortname()}")\\n      else:\\n        raise Exception(f"An unknown error occurred in the API response from {new_tracker.site_shortname()}")\\n  except CustomTrackerError as e:\\n    raise e\\n  except Exception as e:\\n    raise Exception(f"An unknown error occurred: {str(e)}")\\n\\ndef generate_torrent_output_filepath(api_response: dict, new_source: str, output_directory: str) -> str:\\n  filepath_from_api_response = unescape(api_response["response"]["torrent"]["filePath"]) or raise GenerateTorrentError()\\n  filename = f"{filepath_from_api_response} [{new_source}].torrent"\\n  torrent_filepath = os.path.join(output_directory, new_source, filename) or raise GenerateTorrentError()\\n\\n  if os.path.isfile(torrent_filepath):\\n    raise TorrentAlreadyExistsError(f"Torrent file already exists at {torrent_filepath}")\\n\\n  return torrent_filepath\\n\\ndef __get_torrent_id(api_response: dict) -> str:\\n  return api_response["response"]["torrent"]["id"] or raise TorrentNotFoundError()\\n\\ndef __generate_torrent_url(site_url: str, torrent_id: str) -> str:\\n  return f"{site_url}/torrents.php?torrentid={torrent_id}"\\n\\ndef __get_bencoded_data_and_tracker(torrent_path):\\n  fastresume_path = replace_extension(torrent_path, ".fastresume")\\n  source_torrent_data = get_bencoded_data(torrent_path) or raise TorrentDecodingError()\\n  fastresume_data = get_bencoded_data(fastresume_path) or None\\n\\n  if not source_torrent_data:\\n    raise TorrentDecodingError("Error decoding torrent file")\\n\\n  torrent_tracker = get_origin_tracker(source_torrent_data) or None\\n  fastresume_tracker = get_origin_tracker(fastresume_data) or None\\n  source_tracker = torrent_tracker or fastresume_tracker\\n\\n  if not source_tracker:\\n    raise MissingTrackerError()\\n\\n  return source_torrent_data, source_tracker\\n\\ndef __get_reciprocal_tracker_api(new_tracker, red_api, ops_api):\\n  return red_api if new_tracker == RedTracker else ops_api or raise MissingTrackerAPIError()