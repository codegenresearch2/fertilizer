import os\\\" from colorama import Fore\\\" from src.api import RedAPI, OpsAPI\\\" from src.args import parse_args\\\" from src.config import Config\\\" from src.scanner import scan_torrent_directory, scan_torrent_file\\\" from src.webserver import run_webserver\\\\n\\n\\ndef cli_entrypoint(args):\\\" Load configuration and verify API keys\\\" try:\\\" Load configuration\\\" config = Config().load(args.config_file) if args.config_file else Config()\\\" Verify API keys\\\" red_api, ops_api = __verify_api_keys(config)\\\" Run the appropriate function based on the provided arguments\\\" if args.server:\\\" Run the web server\\\" run_webserver(args.input_directory, args.output_directory, red_api, ops_api, port=config.server_port)\\\" Scan a single torrent file\\\" elif args.input_file:\\\" print(scan_torrent_file(args.input_file, args.output_directory, red_api, ops_api))\\\" Scan a directory of torrent files\\\" elif args.input_directory:\\\" print(scan_torrent_directory(args.input_directory, args.output_directory, red_api, ops_api))\\\" except Exception as e:\\\" Print error message and exit\\\" print(f"{Fore.RED}{str(e)}{Fore.RESET}")\\\" exit(1)\\\\n\\n\\ndef __verify_api_keys(config):\\\" Verify API keys using the provided configuration\\" red_api = RedAPI(config.red_key)\\" ops_api = OpsAPI(config.ops_key)\\\" Verify the API keys with the services\\" try:\\\" Get the announce URL\\\" red_api.announce_url\\" ops_api.announce_url\\\" except Exception as e:\\\" Print error message and exit\\\" print(f"{Fore.RED}API key verification failed: {str(e)}")\\\" exit(1)\\\" return red_api, ops_api\\\\n\\n\\nif __name__ == "__main__":\\\" Parse command-line arguments\\" args = parse_args()\\\" Run the CLI entry point\\" try:\\\" cli_entrypoint(args)\\\" except KeyboardInterrupt:\\\" Print exit message on interrupt\\" print(f"{Fore.RED}Exiting...{Fore.RESET}")\\\" exit(1)