import os\\nimport pytest\\\\\\\nfrom src.config import Config\\\\\nfrom src.errors import ConfigKeyError\\\\\nfrom .support import SetupTeardown\\\\n\\nclass TestConfig(SetupTeardown):\\\\\n  def test_loads_config(self):\\\\\n    config = Config().load("tests/support/settings.json")\\\\\n    assert config.red_key == "secret_red"\\\\\n    assert config.ops_key == "secret_ops"\\\\\n\\n  def test_raises_error_on_missing_config_file(self):\\\\\n    with pytest.raises(FileNotFoundError) as excinfo:\\\\\n      Config().load("tests/support/missing.json")\\\\\n    assert "tests/support/missing.json does not exist" in str(excinfo.value)\\\\\n\\n  def test_raises_error_on_missing_key_without_default(self):\\\\\n    with open("/tmp/empty.json", "w") as f:\\\\\n      f.write("{}")\\\\\n    config = Config().load("/tmp/empty.json")\\\\\n    with pytest.raises(ConfigKeyError) as excinfo:\\\\\n      config.red_key\\\\\n    assert "Key 'red_key' not found in config file." in str(excinfo.value)\\\\\n    os.remove("/tmp/empty.json")\\\\\n\\n  def test_returns_default_value_if_present(self):\\\\\n    with open("/tmp/default_config.json", "w") as f:\\\\\n      f.write("{\"red_key\": \"default_red\", \"ops_key\": \"default_ops\"}")\\\\\n    config = Config().load("/tmp/default_config.json")\\\\\n    assert config.red_key == "default_red"\\\\\n    assert config.ops_key == "default_ops"\\\\\n    os.remove("/tmp/default_config.json")